{"version":3,"sources":["Slide.js","Pedals.js","Opening.js","App.js","serviceWorker.js","index.js"],"names":["Slide","styled","section","_templateObject","rotate","keyframes","Pedals_templateObject","mobileRoate","_templateObject2","fadeIn","_templateObject3","foldIn","_templateObject4","Wrapper","div","_templateObject5","props","size","reverse","Pedal","_templateObject6","childSize","index","length","alt","Pedals","_ref","alts","pedals","Array","from","_","i","react_default","a","createElement","map","key","console","log","last","defaultProps","Opening_templateObject","Tipsy","h4","Opening_templateObject2","Opening_templateObject3","opened","Opening","Opening_Wrapper","GlobalStyle","createGlobalStyle","App_templateObject","whiteColor","App","Fragment","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yWAEA,IAKeA,EALDC,IAAOC,QAAVC,kuDCEX,IAAMC,EAASC,YAAHC,KAKNC,EAAcF,YAAHG,KAKXC,EAASJ,YAAHK,KAKNC,EAASN,YAAHO,KAcNC,EAAUZ,IAAOa,IAAVC,IACA,SAAAC,GAAK,OAAIA,EAAMC,MAChB,SAAAD,GAAK,OAAIA,EAAMC,MAONb,EAIK,SAAAY,GAAK,OAAIA,EAAME,QAAU,UAAY,UAGxCX,GAKjBY,EAAQlB,IAAOa,IAAVM,IACE,SAAAJ,GAAK,OAAIA,EAAMK,WAChB,SAAAL,GAAK,OAAIA,EAAMK,WAIa,SAAAL,GAAK,OAAIA,EAAMM,MAAMN,EAAMO,OAAS,KAC9C,SAAAP,GAAK,OAAIA,EAAMC,KAAK,GAClCR,EAIG,SAAAO,GAAK,OAAIA,EAAMQ,KAAO,sBAC1B,SAAAR,GAAK,OAAIA,EAAMK,WAChB,SAAAL,GAAK,OAAIA,EAAMK,WAMXV,GAKH,SAASc,EAATC,GAAqE,IAAlDL,EAAkDK,EAAlDL,UAAWE,EAAuCG,EAAvCH,OAAQN,EAA+BS,EAA/BT,KAAMb,EAAyBsB,EAAzBtB,OAAQc,EAAiBQ,EAAjBR,QAASS,EAAQD,EAARC,KACpEC,EAASC,MAAMC,KAAK,CAAEP,UAAU,SAACQ,EAAGC,GAAJ,OAAUA,IAChD,OACEC,EAAAC,EAAAC,cAACtB,EAAD,CAASI,KAAOA,EAAOC,QAAUA,GAC7BU,EAAOQ,IAAI,SAACL,EAAGM,GAKf,OAJIV,EAAO,GACTW,QAAQC,IAAIF,EAAMV,GAGZM,EAAAC,EAAAC,cAAChB,EAAD,CACNK,IAAMG,EAAO,IAAIU,EAAMV,IAAS,EAAI,qBAAuB,sBAC3DV,KAAOA,EACPoB,IAAMA,EACNf,MAAQe,EACRhB,UAAYA,EACZE,OAASA,EACTnB,OAASA,EACToC,KAAOH,EAAM,IAAMd,yxBAM7BE,EAAOgB,aAAe,CACpBd,MAAM,EACNT,SAAS,EACTK,OAAQ,GACRN,KAAM,IACNI,UAAW,GACXjB,OAAQ,+BCtGV,IAAMK,EAASJ,YAAHqC,KAMNC,EAAQ1C,IAAO2C,GAAVC,IAOKpC,GAaVI,EAAUZ,YAAOD,EAAPC,CAAH6C,IACc,SAAA9B,GAAK,OAAIA,EAAM+B,OAAS,QAAU,MAU9C,SAASC,EAAShC,GAO/B,OACEiB,EAAAC,EAAAC,cAACc,EAAD,CAASF,OAAS/B,EAAM+B,QACtBd,EAAAC,EAAAC,cAACV,EAAD,MACAQ,EAAAC,EAAAC,cAACV,EAAD,CAAQR,KAAO,MACfgB,EAAAC,EAAAC,cAACV,EAAD,CAAQR,KAAO,IAAMI,UAAY,GAAKE,OAAS,GAAKL,SAAO,EAACS,KAAK,MACjEM,EAAAC,EAAAC,cAACQ,EAAD,KACEV,EAAAC,EAAAC,cAAA,icClDR,IAAMe,EAAcC,YAAHC,IAEJ,SAAApC,GAAK,OAAKA,EAAMqC,WAAa,QAAU,UAkCrCC,mLATX,OACErB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAqB,SAAA,KACEtB,EAAAC,EAAAC,cAACe,EAAD,MACAjB,EAAAC,EAAAC,cAACa,EAAD,cALUQ,aCnBEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9B,EAAAC,EAAAC,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.1ff7e5c1.chunk.js","sourcesContent":["import styled, { css } from 'styled-components'\n\nconst Slide = styled.section`\n  height: 100vh;\n  position: relative;\n`\n\nexport default Slide\n","import React from 'react'\n\nimport styled, { keyframes } from 'styled-components'\n\nconst rotate = keyframes`\n  from { transform: translate(-50%, -50%) rotate(0); }\n  to { transform: translate(-50%, -50%) rotate(360deg); }\n`\n\nconst mobileRoate = keyframes`\n  from { transform: translate(-50%, -50%) rotate(0) scale(.7); }\n  to { transform: translate(-50%, -50%) rotate(360deg) scale(.7); }\n`\n\nconst fadeIn = keyframes`\n  from { opacity: 0; }\n  to { opacity: 1; }\n`\n\nconst foldIn = keyframes`\n  from {\n    transform: rotate3d(1, 1, 1, -120deg);\n  }\n\n  80% {\n    transform: rotate3d(1, 1, 1.5, -25deg);\n  }\n\n  to {\n    transform: rotate3d(1, 1, 1.5, -55deg);\n  }\n`\n\nconst Wrapper = styled.div`\n  height: ${ props => props.size }px;\n  width: ${ props => props.size }px;\n  position: absolute;\n\n  border-radius: 50%;\n  top: 40%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  animation-name: ${ rotate };\n  animation-duration: 120s;\n  animation-iteration-count: infinite;\n  animation-timing-function: linear;\n  animation-direction: ${ props => props.reverse ? 'reverse' : 'normal' };\n\n  @media (max-width: 700px) {\n    animation-name: ${ mobileRoate };\n    transform: translate(-50%, -50%) scale(0.7);\n  }\n`\n\nconst Pedal = styled.div`\n  height: ${ props => props.childSize }px;\n  width: ${ props => props.childSize }px;\n  position: absolute;\n  top: 0;\n  left: 50%;\n  transform: translateX(-50%) rotate(${ props => props.index/props.length * 360 }deg);\n  transform-origin: center ${ props => props.size/2 }px;\n  animation: ${ fadeIn } 1s;\n\n\n  &:after {\n    background: ${ props => props.alt || 'rgb(255, 255, 255)' };\n    height: ${ props => props.childSize }px;\n    width: ${ props => props.childSize }px;\n    border: 1px solid #777;\n    transform: rotate3d(1, 1, 1.5, -55deg);\n    content: '';\n    display: block;\n    border-radius: 6px;\n    animation: ${ foldIn } 3s;\n\n  }\n`\n\nexport default function Pedals ({ childSize, length, size, rotate, reverse, alts }) {\n  const pedals = Array.from({ length }, (_, i) => i)\n  return (\n    <Wrapper size={ size } reverse={ reverse }>\n      { pedals.map((_, key) => {\n        if (alts > 0) {\n          console.log(key % alts)\n        }\n\n        return (<Pedal\n          alt={ alts > 0 ? key % alts === 0 ? 'rgb(255, 100, 100)' : 'rgb(255, 240, 240)' : false }\n          size={ size }\n          key={ key }\n          index={ key }\n          childSize={ childSize }\n          length={ length }\n          rotate={ rotate }\n          last={ key + 1 === length } />)\n      }) }\n    </Wrapper>\n  )\n}\n\nPedals.defaultProps = {\n  alts: false,\n  reverse: false,\n  length: 30,\n  size: 400,\n  childSize: 70,\n  rotate: 'rotate3d(1, 1, 1.5, -75deg)'\n}\n","import React from 'react'\nimport styled, { keyframes } from 'styled-components'\n\nimport Slide from './Slide'\nimport Pedals from './Pedals'\n\nconst fadeIn = keyframes`\n  from { opacity: 0; }\n  60% { opacity: 0; }\n  to { opacity: 1; }\n`\n\nconst Tipsy = styled.h4`\n  position: absolute;\n  bottom: 20%;\n  left: 50%;\n  transform: translateX(-50%);\n  text-align: center;\n  font-weight: normal;\n  animation: ${ fadeIn } 3s;\n\n  input {\n    outline: none;\n    border: 0;\n    border-bottom: 1px solid #666;\n    font-size: 20px;\n    text-align: center;\n    width: 100px;\n    font-family: 'Basier Circle';\n  }\n`\n\nconst Wrapper = styled(Slide)`\n  transform: translateY(${ props => props.opened ? '-100%' : '0' });\n  transition: transform 1s;\n  position: absolute;\n  top: 0;\n  left: 0;\n  z-index: 2;\n  width: 100%;\n  background: white;\n`\n\nexport default function Opening (props) {\n  function handleKeyDown (e) {\n    if (parseInt(e.currentTarget.value) > 1000 && e.which === 13) {\n      return props.onClick()\n    }\n  }\n\n  return (\n    <Wrapper opened={ props.opened }>\n      <Pedals />\n      <Pedals size={ 360 } />\n      <Pedals size={ 300 } childSize={ 35 } length={ 40 } reverse alts=\"2\" />\n      <Tipsy>\n        <p>long overdue.</p>\n      </Tipsy>\n    </Wrapper>\n  )\n}\n","import React, { Component } from 'react'\n\nimport styled, { css, createGlobalStyle, keyframes } from 'styled-components'\n\nimport Opening from './Opening'\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    color: ${props => (props.whiteColor ? 'white' : 'black')};\n    font-family: 'Basier Circle';\n    font-size: 18px;\n    height: 100%;\n    -webkit-user-select: none;\n    -webkit-tap-highlight-color: transparent;\n    -webkit-touch-callout: none;\n  }\n\n  html {\n    height: 100%;\n  }\n\n  figure {\n    margin: 0;\n    font-size: 1em;\n  }\n\n  #root {\n    height: 100%;\n  }\n`\n\nclass App extends Component {\n  render() {\n    return (\n      <>\n        <GlobalStyle />\n        <Opening />\n      </>\n    );\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}